| TYPE DISCIPLINE  | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|------------------+---------+---------+--------+----------+---------+------+-------|
| strongly typed   | yes     | yes     | yes    | yes      | yes     | yes  | yes   |
| statically typed | no      | no      | no     | yes      | yes     | yes  | yes   |


| STATIC TYPING            | F#/OCaml | Haskell | Java | Scala |
|--------------------------+----------+---------+------+-------|
| type inference           | yes      | yes     | no   | yes   |
| function type parameters |          | yes     | yes  | yes   |
| class type parameters    |          |         | yes  | yes   |
| existential types        |          |         | yes  | yes   |
| abstract types           |          |         | no   | yes   |
| type bounds              |          |         | yes  | yes   |
| self types               |          |         | no   | yes   |
| path-dependent types     |          |         |      | yes   |
| bottom types             |          |         | no   | yes   |
| compound types           |          |         |      | yes   |
| higher kinded types      |          |         | no   | yes   |
| structural types         |          |         | no   | yes   |
| views                    |          |         |      | yes   |


| OBJECTS                                                        | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|----------------------------------------------------------------+---------+---------+--------+----------+---------+------+-------|
| objects (function/data containers that are first-class values) |         | yes     |        | yes      |         | yes  | yes   |
| all values are objects                                         |         | yes     |        |          |         | no   | yes   |
| interfaces (contracts) with abstract functions                 |         | no      |        |          |         | yes  | yes   |
| interfaces (contracts) with abstract data                      |         | no      |        |          |         | no   | yes   |
| interface inheritance                                          |         | yes     |        |          |         | yes  | yes   |
| concrete inheritance                                           |         | yes     |        |          |         | yes  | yes   |
| multiple interface inheritance                                 |         | n/a     |        |          |         | yes  | yes   |
| multiple concrete inheritance                                  |         | yes     |        |          |         | no   | yes   |
| anonymous classes                                              |         |         |        |          |         | yes  | yes   |
| data hiding enforced                                           |         | no      |        |          |         | yes  | yes   |


| FUNCTIONS                         | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|-----------------------------------+---------+---------+--------+----------+---------+------+-------|
| operators evaluate like functions |         |         | no     |          |         | no   | yes   |
| operator overloading              |         | yes     |        |          | yes     | no   | yes   |
| first-class functions             | yes     | yes     | yes    |          | yes     | no   | yes   |
| anonymous functions               | yes     | yes     | yes    |          | yes     | no   | yes   |
| nested named functions            |         | yes     |        |          |         | no   | yes   |
| currying                          |         |         |        |          | yes     | no   | yes   |
| partial application of functions  |         | stdlib  |        |          | yes     | no   | yes   |
| full tail call optimization       | no      | no      | yes    |          | yes     | no   | no    |
| overloading                       | yes     | no      |        |          |         | yes  | yes   |
| default arguments                 |         | yes     |        |          |         | no   | yes   |
| named arguments                   |         | yes     |        |          |         | no   | yes   |
| variable number arguments         |         |         |        |          |         | yes  | yes   |
| unstructured side-effects         | yes     | yes     | yes    |          | no      | yes  | yes   |
| generators                        |         |         |        |          |         |      |       |
| continuations                     |         |         |        |          |         |      |       |

Notes: Scala's methods aren't themselves first-class but can always be treated as such. 


| BINDINGS & SCOPE  | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|-------------------+---------+---------+--------+----------+---------+------+-------|
| lexical scope     |         | no      |        |          |         | yes  | yes   |
| single assignment | no      | no      | yes    |          | yes     | both | both  |
| closures          |         |         |        |          |         | no   | yes   |


| LIBRARY             | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|---------------------+---------+---------+--------+----------+---------+------+-------|
| implicit functions  |         |         |        |          |         | no   | yes   |
| implicit parameters |         |         |        |          |         | no   | yes   |
| first-class modules |         | yes     |        |          |         |      |       |

Notes: Scala 2.8's package objects can only add members to a package.


| EVALUATION                            | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|---------------------------------------+---------+---------+--------+----------+---------+------+-------|
| lazy evaluation                       |         | no      |        |          | yes     | no   | no    |
| lazy initialization of fields         |         |         |        |          |         | no   | yes   |
| delayed parameter evaluation possible |         |         |        |          |         | no   | yes   |
| uniform access principle              |         | no      |        |          |         | no   | yes   |

Notes: Only Java's static fields are initialized lazily.


| LANGUAGE                       | Clojure | CPython | Erlang | F#/OCaml | Haskell | Java | Scala |
|--------------------------------+---------+---------+--------+----------+---------+------+-------|
| preprocessor                   | yes     |         |        |          |         | no   | no    |
| pattern matching               | yes     | no      | yes    |          | yes     | no   | yes   |
| pattern matching in parameters |         | no      | yes    |          | yes     | no   | no    |
| reflection                     |         |         |        |          |         | yes  |       |
| metaprogramming                |         |         |        |          |         |      |       |

| CONCURRENCY             | Clojure | CPython | Erlang | Haskell | F#/OCaml | Java | Scala |
|-------------------------+---------+---------+--------+---------+----------+------+-------|
| true parallelism        | yes     | no      | yes    | yes     | yes      | yes  | yes   |
| unmanaged mutable state | no      | yes     |        | no      |          | yes  | yes   |

Notes: CPython's global interpreter lock prevents two threads from making progress at the same time.
n
